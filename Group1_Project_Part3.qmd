---
title: "Project Part 3"
subtitle: "STAT 511"
author: "Moses Sanches, Shuyu Wang, Theodore Choi"
date: "`r Sys.Date()`"
format: 
  html:
    self-contained: true
    toc: true
    toc_float: true
    number-section: false
    highlight: tango
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: setup
#| include: false
knitr::opts_chunk$set(echo = TRUE)

```

```{r}
#| message: false
# Libraries we used
library(openintro)
library(tidyverse)
library(dplyr)
library(broom)
library(ggplot2)
library(corrplot)
library(GGally)
library(glue)
library(ggpubr)
library(olsrr)
library(MASS)
library(cowplot)

```

```{r}

# import data
filepath_2013 <- "./data/longevity Data Cleaned Version 2013.rds"

life_exp_2013 <- readRDS(filepath_2013)

# show the top rows of the dataframe
head(life_exp_2013)

```

## Part A -- continuous predictors

### 1. Produce a scatterplot matrix and the correlation matrix for all continuous predictors and the response variable.

> We will break up the numerical predictors by continuous and discrete as it seems to be the simplest way of divvying up the numerical variables

### Continuous Variable Analysis

```{r}
#| message: false
#| warning: false
# dataframe of continuous columns
# other numerical variables seem to be counts (some based on per 1000, but still count nonetheless)
life_exp_2013_cont <- life_exp_2013[,c('longevity',
                                       'alcohol',
                                       'perc_exp',
                                       'bmi',
                                       'tot_exp',
                                       'aids',
                                       'gdp',
                                       'thin_1_19',
                                       'thin_5_9',
                                       'inc_comp',
                                       'school')]

# Scatterplot matrix of the data
pairs(life_exp_2013_cont,
      upper.panel = NULL,
      labels = names(life_exp_2013_cont))

# correlation matrix of the data
corr_matrix <- ggpairs(life_exp_2013_cont,
                       upper = list(continuous = wrap('cor', size = 3))) + 
                       theme(axis.text.x = element_text(angle = 90, hjust = 1))

# Commented out due to all of the notification lines
print(corr_matrix)

```

##### a. Which variables appear most related to the response?

> It seems that Income Composition of Resources (Corr: 0.891) and Schooling (Corr: 0.795) are most related to the response. HIV AIDS (Corr: -0.622) also seems to be related to the response

##### b. Is there the potential of an issue with predictor (x) variables that are highly correlated (which variables)?

> Thinness of Ages 1 to 19 and Thinness of Ages 5 to 9 seem to be quite correlated/possibly colinear (Corr: 0.925). Income Composition of Resources and Schooling also seem to be correlated/possibly colinear (Corr: 0.913). Percent Expenditure on Health as a Percentage of GDP and GDP also seem highly correlated/possibly colinear (Corr: 0.918).

### Discrete Variable Analysis

```{r}
#| message: false
#| warning: false
# dataframe of categorical variables
life_exp_2013_categ <- life_exp_2013[,c('longevity', 'country', 'continent', 'status')]

# dataframe of discrete variables
life_exp_2013_disc_noresponse <- life_exp_2013 [ ! (life_exp_2013) %in% c(life_exp_2013_cont, life_exp_2013_categ)]

# adding response variable
life_exp_2013_disc <- cbind(life_exp_2013['longevity'], life_exp_2013_disc_noresponse)

# Scatterplot matrix of the data
pairs(life_exp_2013_disc,
      upper.panel = NULL,
      labels = names(life_exp_2013_disc))

# correlation matrix of the data
corr_matrix <- ggpairs(life_exp_2013_disc,
                       upper = list(continuous = wrap('cor', size = 3))) + 
                       theme(axis.text.x = element_text(angle = 90, hjust = 1))

# Commented out due to all of the notification lines
# print(corr_matrix)

```

##### a. Which variables appear most related to the response?

> It seems that Adult Mortality (Corr: 0.723) is most related to the response

##### b. Is there the potential of an issue with predictor (x) variables that are highly correlated (which variables)?

> Infant Deaths and Under 5 Deaths seem to be quite correlated/possibly colinear (Corr: 0.997). Hepatitis B and Diptheria also seem to be correlated/possibly colinear (Corr: 0.711)

### 2. For EACH predictor separately (one at a time), fit the SLR model and note the significance of the predictor.

##### a. Using your exploratory analysis in Project Part 2 and the scatterplot you created above, you may choose to transform the x variable now if there is a very strong and clear choice of non-linear function. If so, refit the SLR model with the transformed predictor and note the significance.

### Continuous Variable Analysis

```{r}
# assign column names to variable
colnames_lifeexp_cont <- names(life_exp_2013_cont)[-1]

# credit to: https://stackoverflow.com/questions/59161144/creating-a-loop-through-a-list-of-variables-for-an-lm-model-in-r
# assign list of models to variable
list_formulas_cont <- lapply(paste("longevity ~", colnames_lifeexp_cont), as.formula)

# apply linear model function to the list of variables
list_lm_life_exp_cont <- lapply(list_formulas_cont, function(x) lm(x, data = life_exp_2013_cont))

# apply augment function to the list of linear models
list_aug_life_exp_cont <- lapply(list_lm_life_exp_cont, function(x) augment(x))

# assigning the summaries of the linear model iterable as an iterable to a variable
list_lm_life_exp_summ_cont <- lapply(list_lm_life_exp_cont, summary)

# list_ftestfit <- lapply(list_lm_life_exp, function(x) ols_pure_error_anova(x))



# iterating through the columns to get p-values and linearity assumption plots
# creating a range for iteration
my_range <- 1:length(colnames_lifeexp_cont)

# outputting relevant plots
for (i in my_range)
  {
  # get the p value of the independent variable
  print(glue('The p value for longevity vs {colnames_lifeexp_cont[i]} is {signif(tidy(list_lm_life_exp_summ_cont[[i]])[2,5], 3)}'))
  
  
  
  # get the p value of the independent variable
  print(glue('Plots to determine linear assumptions of {colnames_lifeexp_cont[i]}:'))
  
  # Linearity, Equal Variance
  p1 <- ggplot(data = list_aug_life_exp_cont[[i]],
               aes(y = .resid,
                   x = .fitted)) +
        geom_point() +
        labs(title = glue('Residuals vs Fitted for {colnames_lifeexp_cont[i]}'),
                  x = colnames_lifeexp_cont[i],
                  y = ".resid") +
        theme_minimal()
  
  # Normality
  p2 <- ggplot(data = list_aug_life_exp_cont[[i]],
               aes(sample = .resid)) +    
        geom_qq_line() +
        geom_qq() +
        labs(title = glue('QQ of Residuals vs {colnames_lifeexp_cont[i]}'),
                  x = 'Theoretical',
                  y = "Sample") +
        theme_minimal()
  
  # Outliers
  p3 <- ggplot(data = list_aug_life_exp_cont[[i]], aes(x = .resid)) +    
        geom_boxplot() + 
        labs(title = glue('Boxplot of Residuals for longevity vs {colnames_lifeexp_cont[i]}'),
                  x = 'Theoretical',
                  y = "Sample") +
        theme_minimal()
  
  print(plot_grid(p1, p2, p3, nrow = 2))
  }

```

> It seems that most of the SLR models comparing the response to the numerical predictors produce a small p value.

> There seems to be the most non-normality for alcohol

###### alcohol

```{r}

# transform the independent variable
life_exp_2013 <- life_exp_2013 %>%
  mutate(alcohol_trnsfrm = alcohol^(1/2))

# transform the dependent variable
# life_exp_2013 <- life_exp_2013 %>%
#   mutate(longevity_squared = longevity^2)

# fit the model and the augment
alcohol_lm <- lm(longevity ~ alcohol_trnsfrm, life_exp_2013)
alcohol_aug_lm <- augment(alcohol_lm)

# plot the relevant graphs
ggplot(data = alcohol_aug_lm,
             aes(y = .resid,
                x = .fitted)) +    
      geom_point() +
      labs(title = 'Residuals vs alcohol') +
      theme_minimal()

 ggplot(data = alcohol_aug_lm,
             aes(sample = .resid)) +    
      geom_qq_line() +
      geom_qq() +
      labs(title = 'QQ of alcohol',
           x = 'Theoretical',
           y = "Sample") +
      theme_minimal()

boxcox(alcohol_lm)

```

> The p value for the transformed longevity vs transformed alcohol is `r signif(tidy(summary(alcohol_lm))[2,5], 3)`

###### perc_exp

```{r}

# transform the independent variable
life_exp_2013 <- life_exp_2013 %>%
  mutate(perc_exp_trnsfrm = (log(perc_exp))^(1/2))

# fit the model and the augment
perc_exp_lm <- lm(longevity ~ perc_exp_trnsfrm, life_exp_2013)
perc_exp_aug_lm <- augment(perc_exp_lm)

# plot the relevant graphs
ggplot(data = perc_exp_aug_lm,
       aes(y = .resid,
           x = .fitted)) +    
  geom_point() +
  labs(title = 'Residuals vs perc_exp') +
  theme_minimal()

ggplot(data = perc_exp_aug_lm,
         aes(sample = .resid)) +    
  geom_qq_line() +
  geom_qq() +
  labs(title = 'QQ of perc_exp',
       x = 'Theoretical',
       y = "Sample") +
  theme_minimal()

boxcox(perc_exp_lm)

```

> The p value for longevity vs the transformed perc_exp is `r signif(tidy(summary(perc_exp_lm))[2,5], 3)`

###### bmi

```{r}

# transform the independent variable
life_exp_2013 <- life_exp_2013 %>%
  mutate(bmi_trnsfrm = bmi^(2))

# fit the model and the augment
bmi_lm <- lm(longevity ~ bmi_trnsfrm, life_exp_2013)
bmi_aug_lm <- augment(bmi_lm)

# plot the relevant graphs
ggplot(data = bmi_aug_lm,
               aes(y = .resid,
                   x = .fitted)) +    
        geom_point() +
        labs(title = 'Residuals vs bmi') +
        theme_minimal()

ggplot(data = bmi_aug_lm,
               aes(sample = .resid)) +    
        geom_qq_line() +
        geom_qq() +
        labs(title = 'QQ of bmi',
                  x = 'Theoretical',
                  y = "Sample") +
        theme_minimal()

boxcox(bmi_lm)

```

> The p value for longevity vs the transformed bmi is `r signif(tidy(summary(bmi_lm))[2,5], 3)`

###### tot_exp

```{r}

# transform the independent variable
life_exp_2013 <- life_exp_2013 %>%
  mutate(tot_exp_trnsfrm = tot_exp^(1/2))

# fit the model and the augment
tot_exp_lm <- lm(longevity ~ tot_exp_trnsfrm, life_exp_2013)
tot_exp_aug_lm <- augment(tot_exp_lm)

# plot the relevant graphs
ggplot(data = tot_exp_aug_lm,
               aes(y = .resid,
                   x = .fitted)) +    
        geom_point() +
        labs(title = 'Residuals vs tot_exp') +
        theme_minimal()

ggplot(data = tot_exp_aug_lm,
               aes(sample = .resid)) +    
        geom_qq_line() +
        geom_qq() +
        labs(title = 'QQ of tot_exp',
                  x = 'Theoretical',
                  y = "Sample") +
        theme_minimal()

boxcox(tot_exp_lm)

```

> The p value for longevity vs the transformed tot_exp is `r signif(tidy(summary(tot_exp_lm))[2,5], 3)`

###### aids

```{r}

# transform the independent variable
life_exp_2013 <- life_exp_2013 %>%
  mutate(aids_trnsfrm = sqrt(log(aids)), na.rm = TRUE)

# fit the model and the augment
aids_lm <- lm(longevity ~ aids_trnsfrm, life_exp_2013)
aids_aug_lm <- augment(aids_lm)

# plot the relevant graphs
ggplot(data = aids_aug_lm,
               aes(y = .resid,
                   x = .fitted)) +    
        geom_point() +
        labs(title = 'Residuals vs aids') +
        theme_minimal()

ggplot(data = aids_aug_lm,
               aes(sample = .resid)) +    
        geom_qq_line() +
        geom_qq() +
        labs(title = 'QQ of aids',
                  x = 'Theoretical',
                  y = "Sample") +
        theme_minimal()

boxcox(aids_lm)

```

> The p value for longevity vs the transformed aids is `r signif(tidy(summary(aids_lm))[2,5], 3)`

###### gdp

```{r}

# transform the independent variable
life_exp_2013 <- life_exp_2013 %>%
  mutate(gdp_trnsfrm = sqrt(log(gdp)))

# fit the model and the augment
gdp_lm <- lm(longevity ~ gdp_trnsfrm, life_exp_2013)
gdp_aug_lm <- augment(gdp_lm)

# plot the relevant graphs
ggplot(data = gdp_aug_lm,
               aes(y = .resid,
                   x = .fitted)) +    
        geom_point() +
        labs(title = 'Residuals vs gdp') +
        theme_minimal()

ggplot(data = gdp_aug_lm,
               aes(sample = .resid)) +    
        geom_qq_line() +
        geom_qq() +
        labs(title = 'QQ of gdp',
                  x = 'Theoretical',
                  y = "Sample") +
        theme_minimal()

boxcox(gdp_lm)

```

> The p value for transformed longevity vs the transformed gdp is `r signif(tidy(summary(gdp_lm))[2,5], 3)`

###### thin_1\_19

```{r}

# transform the independent variable
life_exp_2013 <- life_exp_2013 %>%
  mutate(thin_1_19_trnsfrm = (thin_1_19)^(1/4))

# fit the model and the augment
thin_1_19_lm <- lm(longevity ~ thin_1_19_trnsfrm, life_exp_2013)
thin_1_19_aug_lm <- augment(thin_1_19_lm)

# plot the relevant graphs
ggplot(data = thin_1_19_aug_lm,
               aes(y = .resid,
                   x = .fitted)) +    
        geom_point() +
        labs(title = 'Residuals vs thin_1_19') +
        theme_minimal()

ggplot(data = thin_1_19_aug_lm,
               aes(sample = .resid)) +    
        geom_qq_line() +
        geom_qq() +
        labs(title = 'QQ of thin_1_19',
                  x = 'Theoretical',
                  y = "Sample") +
        theme_minimal()

boxcox(thin_1_19_lm)

```

> The p value for transformed longevity vs the transformed thin_1\_19 is `r signif(tidy(summary(thin_1_19_lm))[2,5], 3)`

###### thin_5\_9

```{r}

# transform the independent variable
life_exp_2013 <- life_exp_2013 %>%
  mutate(thin_5_9_trnsfrm = (thin_5_9)^(1/4))

# fit the model and the augment
thin_5_9_lm <- lm(longevity ~ thin_5_9_trnsfrm, life_exp_2013)
thin_5_9_aug_lm <- augment(thin_5_9_lm)

# plot the relevant graphs
ggplot(data = thin_5_9_aug_lm,
               aes(y = .resid,
                   x = .fitted)) +    
        geom_point() +
        labs(title = 'Residuals vs thin_5_9') +
        theme_minimal()

ggplot(data = thin_5_9_aug_lm,
               aes(sample = .resid)) +    
        geom_qq_line() +
        geom_qq() +
        labs(title = 'QQ of thin_5_9',
                  x = 'Theoretical',
                  y = "Sample") +
        theme_minimal()

boxcox(thin_5_9_lm)

```

> The p value for transformed longevity vs the transformed thin_5\_9 is `r signif(tidy(summary(thin_5_9_lm))[2,5], 3)`

> We will transform the dataset as follows:

```{r}

# dataframe of continuous columns
# other numerical variables seem to be counts (some based on per 1000, but still count nonetheless)
life_exp_2013_tfm_cont <- life_exp_2013[,c('longevity',
                                           'alcohol_trnsfrm',
                                           'perc_exp_trnsfrm',
                                           'bmi',
                                           'tot_exp',
                                           'aids_trnsfrm',
                                           'gdp_trnsfrm',
                                           'thin_1_19',
                                           'thin_5_9',
                                           'inc_comp',
                                           'school')]

head(life_exp_2013_tfm_cont)

```

### Discrete Variable Analysis

```{r}
# assign column names to variable
colnames_lifeexp_disc <- names(life_exp_2013_disc)[-1]

# credit to: https://stackoverflow.com/questions/59161144/creating-a-loop-through-a-list-of-variables-for-an-lm-model-in-r
# assign list of models to variable
list_formulas_disc <- lapply(paste("longevity ~", colnames_lifeexp_disc), as.formula)

# apply linear model function to the list of variables
list_lm_life_exp_disc <- lapply(list_formulas_disc, function(x) lm(x, data = life_exp_2013_disc))

# apply augment function to the list of linear models
list_aug_life_exp_disc <- lapply(list_lm_life_exp_disc, function(x) augment(x))

# assigning the summaries of the linear model iterable as an iterable to a variable
list_lm_life_exp_summ_disc <- lapply(list_lm_life_exp_disc, summary)

# list_ftestfit <- lapply(list_lm_life_exp, function(x) ols_pure_error_anova(x))



# iterating through the columns to get p-values and linearity assumption plots
# creating a range for iteration
my_range <- 1:length(colnames_lifeexp_disc)

# outputting relevant plots
for (i in my_range)
  {
  # get the p value of the independent variable
  print(glue('The p value for longevity vs {colnames_lifeexp_disc[i]} is {signif(tidy(list_lm_life_exp_summ_disc[[i]])[2,5], 3)}'))
  
  
  
  # get the p value of the independent variable
  print(glue('Plots to determine linear assumptions of {colnames_lifeexp_disc[i]}:'))
  
  # Linearity, Equal Variance
  p1 <- ggplot(data = list_aug_life_exp_disc[[i]],
               aes(y = .resid,
                   x = .fitted)) +
        geom_point() +
        labs(title = glue('Residuals vs Fitted for {colnames_lifeexp_disc[i]}'),
                  x = colnames_lifeexp_disc[i],
                  y = ".resid") +
        theme_minimal()
  
  # Normality
  p2 <- ggplot(data = list_aug_life_exp_disc[[i]],
               aes(sample = .resid)) +    
        geom_qq_line() +
        geom_qq() +
        labs(title = glue('QQ of Residuals vs {colnames_lifeexp_disc[i]}'),
                  x = 'Theoretical',
                  y = "Sample") +
        theme_minimal()
  
  # Outliers
  p3 <- ggplot(data = list_aug_life_exp_disc[[i]], aes(x = .resid)) +    
        geom_boxplot() + 
        labs(title = glue('Boxplot of Residuals for longevity vs {colnames_lifeexp_disc[i]}'),
                  x = 'Theoretical',
                  y = "Sample") +
        theme_minimal()
  
  print(plot_grid(p1, p2, p3, nrow = 2))
  }

```

> It seems that most of the SLR models comparing the response to the numerical predictors produce a small p value, except for Measles and Population

###### adult_mort

```{r}

# transform the independent variable
# the commented section does spread out the points, but does not seem very helpful for the time being
# life_exp_2013 <- life_exp_2013 %>%
#   mutate(adult_mort_trnsfrm = adult_mort^(1/3))
life_exp_2013 <- life_exp_2013 %>%
  mutate(adult_mort_trnsfrm = adult_mort^(1))

# transform the dependent variable
# life_exp_2013 <- life_exp_2013 %>%
#   mutate(longevity_squared = longevity^1)

# fit the model and the augment
adult_mort_lm <- lm(longevity ~ adult_mort_trnsfrm, life_exp_2013)
adult_mort_aug_lm <- augment(adult_mort_lm)

# plot the relevant graphs
ggplot(data = adult_mort_aug_lm,
             aes(y = .resid,
                x = .fitted)) +    
      geom_point() +
      labs(title = 'Residuals vs adult_mort') +
      theme_minimal()

 ggplot(data = adult_mort_aug_lm,
             aes(sample = .resid)) +    
      geom_qq_line() +
      geom_qq() +
      labs(title = 'QQ of adult_mort',
           x = 'Theoretical',
           y = "Sample") +
      theme_minimal()

boxcox(adult_mort_lm)

```

> The p value for transformed longevity vs the transformed adult_mort is `r signif(tidy(summary(adult_mort_lm))[2,5], 3)`

###### inf_death

```{r}

# transform the independent variable
life_exp_2013 <- life_exp_2013 %>%
  mutate(inf_death_trnsfrm = inf_death^(1/2))

# transform the dependent variable
life_exp_2013 <- life_exp_2013 %>%
  mutate(longevity_squared = longevity^1)

# fit the model and the augment
inf_death_lm <- lm(longevity ~ inf_death_trnsfrm, life_exp_2013)
inf_death_aug_lm <- augment(inf_death_lm)

# plot the relevant graphs
ggplot(data = inf_death_aug_lm,
             aes(y = .resid,
                x = .fitted)) +    
      geom_point() +
      labs(title = 'Residuals vs inf_death') +
      theme_minimal()

 ggplot(data = inf_death_aug_lm,
             aes(sample = .resid)) +    
      geom_qq_line() +
      geom_qq() +
      labs(title = 'QQ of inf_death',
           x = 'Theoretical',
           y = "Sample") +
      theme_minimal()

boxcox(inf_death_lm)

```

> The p value for transformed longevity vs the transformed inf_death is `r signif(tidy(summary(inf_death_lm))[2,5], 3)`

###### hep_b

```{r}

# transform the independent variable
life_exp_2013 <- life_exp_2013 %>%
  mutate(hep_b_trnsfrm = hep_b^(4))

# transform the dependent variable
# life_exp_2013 <- life_exp_2013 %>%
#   mutate(longevity_squared = longevity^1)

# fit the model and the augment
hep_b_lm <- lm(longevity ~ hep_b_trnsfrm, life_exp_2013)
hep_b_aug_lm <- augment(hep_b_lm)

# plot the relevant graphs
ggplot(data = hep_b_aug_lm,
             aes(y = .resid,
                x = .fitted)) +    
      geom_point() +
      labs(title = 'Residuals vs hep_b') +
      theme_minimal()

 ggplot(data = hep_b_aug_lm,
             aes(sample = .resid)) +    
      geom_qq_line() +
      geom_qq() +
      labs(title = 'QQ of hep_b',
           x = 'Theoretical',
           y = "Sample") +
      theme_minimal()

boxcox(hep_b_lm)

```

> The p value for transformed longevity vs the transformed hep_b is `r signif(tidy(summary(hep_b_lm))[2,5], 3)`

###### measles

```{r}

# transform the independent variable
life_exp_2013 <- life_exp_2013 %>%
  mutate(measles_trnsfrm = measles^(1/4))

# transform the dependent variable
# life_exp_2013 <- life_exp_2013 %>%
#   mutate(longevity_squared = longevity^1)

# fit the model and the augment
measles_lm <- lm(longevity ~ measles_trnsfrm, life_exp_2013)
measles_aug_lm <- augment(measles_lm)

# plot the relevant graphs
ggplot(data = measles_aug_lm,
             aes(y = .resid,
                x = .fitted)) +    
      geom_point() +
      labs(title = 'Residuals vs measles') +
      theme_minimal()

ggplot(data = measles_aug_lm,
             aes(sample = .resid)) +    
      geom_qq_line() +
      geom_qq() +
      labs(title = 'QQ of measles',
           x = 'Theoretical',
           y = "Sample") +
      theme_minimal()

boxcox(measles_lm)

```

> The p value for transformed longevity vs the transformed measles is `r signif(tidy(summary(measles_lm))[2,5], 3)`

###### u5_deaths

```{r}

# transform the independent variable
life_exp_2013 <- life_exp_2013 %>%
  mutate(u5_deaths_trnsfrm = u5_deaths^(1/2))

# transform the dependent variable
# life_exp_2013 <- life_exp_2013 %>%
#   mutate(longevity_squared = longevity^1)

# fit the model and the augment
u5_deaths_lm <- lm(longevity ~ u5_deaths_trnsfrm, life_exp_2013)
u5_deaths_aug_lm <- augment(u5_deaths_lm)

# plot the relevant graphs
ggplot(data = u5_deaths_aug_lm,
             aes(y = .resid,
                x = .fitted)) +    
      geom_point() +
      labs(title = 'Residuals vs u5_deaths') +
      theme_minimal()

ggplot(data = u5_deaths_aug_lm,
             aes(sample = .resid)) +    
      geom_qq_line() +
      geom_qq() +
      labs(title = 'QQ of u5_deaths',
           x = 'Theoretical',
           y = "Sample") +
      theme_minimal()

boxcox(u5_deaths_lm)

```

> The p value for transformed longevity vs the transformed u5_deaths is `r signif(tidy(summary(u5_deaths_lm))[2,5], 3)`

###### polio

```{r}

# transform the independent variable
life_exp_2013 <- life_exp_2013 %>%
  mutate(polio_trnsfrm = polio^(5))

# transform the dependent variable
# life_exp_2013 <- life_exp_2013 %>%
#   mutate(longevity_squared = longevity^1)

# fit the model and the augment
polio_lm <- lm(longevity ~ polio_trnsfrm, life_exp_2013)
polio_aug_lm <- augment(polio_lm)

# plot the relevant graphs
ggplot(data = polio_aug_lm,
             aes(y = .resid,
                x = .fitted)) +    
      geom_point() +
      labs(title = 'Residuals vs polio') +
      theme_minimal()

ggplot(data = polio_aug_lm,
             aes(sample = .resid)) +    
      geom_qq_line() +
      geom_qq() +
      labs(title = 'QQ of polio',
           x = 'Theoretical',
           y = "Sample") +
      theme_minimal()

boxcox(polio_lm)

```

> The p value for transformed longevity vs the transformed polio is `r signif(tidy(summary(polio_lm))[2,5], 3)`

###### dipth

```{r}

# transform the independent variable
life_exp_2013 <- life_exp_2013 %>%
  mutate(dipth_trnsfrm = dipth^(6))

# transform the dependent variable
# life_exp_2013 <- life_exp_2013 %>%
#   mutate(longevity_squared = longevity^1)

# fit the model and the augment
dipth_lm <- lm(longevity ~ dipth_trnsfrm, life_exp_2013)
dipth_aug_lm <- augment(dipth_lm)

# plot the relevant graphs
ggplot(data = dipth_aug_lm,
             aes(y = .resid,
                x = .fitted)) +    
      geom_point() +
      labs(title = 'Residuals vs dipth') +
      theme_minimal()

ggplot(data = dipth_aug_lm,
             aes(sample = .resid)) +    
      geom_qq_line() +
      geom_qq() +
      labs(title = 'QQ of dipth',
           x = 'Theoretical',
           y = "Sample") +
      theme_minimal()

boxcox(dipth_lm)

```

> The p value for transformed longevity vs the transformed dipth is `r signif(tidy(summary(dipth_lm))[2,5], 3)`

###### pop

```{r}

# transform the independent variable
life_exp_2013 <- life_exp_2013 %>%
  mutate(pop_trnsfrm = log(pop))

# transform the dependent variable
# life_exp_2013 <- life_exp_2013 %>%
#   mutate(longevity_squared = longevity^1)

# fit the model and the augment
pop_lm <- lm(longevity ~ pop_trnsfrm, life_exp_2013)
pop_aug_lm <- augment(pop_lm)

# plot the relevant graphs
ggplot(data = pop_aug_lm,
             aes(y = .resid,
                x = .fitted)) +    
      geom_point() +
      labs(title = 'Residuals vs pop') +
      theme_minimal()

ggplot(data = pop_aug_lm,
             aes(sample = .resid)) +    
      geom_qq_line() +
      geom_qq() +
      labs(title = 'QQ of pop',
           x = 'Theoretical',
           y = "Sample") +
      theme_minimal()

boxcox(pop_lm)

```

> The p value for transformed longevity vs the transformed pop is `r signif(tidy(summary(pop_lm))[2,5], 3)` which is an improvement over not transforming the variable, but still not significant

> We will transform the dataset as follows:

```{r}

# dataframe of continuous columns
# other numerical variables seem to be counts (some based on per 1000, but still count nonetheless)
life_exp_2013_tfm_disc <- life_exp_2013[,c('adult_mort_trnsfrm',
                                           'inf_death_trnsfrm',
                                           'hep_b_trnsfrm',
                                           'measles_trnsfrm',
                                           'u5_deaths_trnsfrm',
                                           'polio_trnsfrm',
                                           'dipth_trnsfrm',
                                           'pop_trnsfrm')]

life_exp_2013_response <- life_exp_2013[,'longevity']

# assign transformed columns to variable
life_exp_2013_tfm_num <- cbind(life_exp_2013_tfm_cont,
                               life_exp_2013_tfm_disc,
                               life_exp_2013_response)[-1]

# output dataframe
head(life_exp_2013_tfm_num)

```

> There is a possibility that we are not capturing relationships between certain numerical variables because we broke up the analysis between categorical and discrete variables. Below, we can see the scatterplot matrix and correlation matrix for all numerical variables

```{r}

# dataframe of numeric columns
# get all numeric columns
life_exp_2013_num_unfiltered <- life_exp_2013[, unlist(lapply(life_exp_2013, is.numeric))]

head(life_exp_2013_num_unfiltered)

# exclude columns that contain substrings below
life_exp_2013_num <- life_exp_2013[!grepl('trnsfrm|squared|country|continent|status', names(life_exp_2013))]

head(life_exp_2013_num)

# Scatterplot matrix of the data
pairs(life_exp_2013_num,
      upper.panel = NULL,
      labels = names(life_exp_2013_num))

# correlation matrix of the data
corr_matrix <- ggpairs(life_exp_2013_num,
                       upper = list(continuous = wrap('cor', size = 3))) + 
                       theme(axis.text.x = element_text(angle = 90, hjust = 1))

# Commented out due to all of the notification lines
# print(corr_matrix)

```

> Held off on response variable transformations as suggested by Dr Fitz

## Part B -- categorical predictors

##### a. Be sure the categorical variable is stored as a "factor" variable.

```{r}
# factorize the categorical variable
life_exp_2013$country <- factor(life_exp_2013$country)
# check successful factorization
is.factor(life_exp_2013$country)
```

```{r}
# factorize the categorical variable
life_exp_2013$continent <- factor(life_exp_2013$continent)
# check successful factorization
is.factor(life_exp_2013$continent)
```

```{r}
# factorize the categorical variable
life_exp_2013$status <- factor(life_exp_2013$status)
# check successful factorization
is.factor(life_exp_2013$status)
```

### b. For EACH categorical predictor separately (one at a time), fit a SLR model

```{r}
# fit the linear model to the categorical variable
country.lm <- lm(longevity ~ life_exp_2013$country, data=life_exp_2013)
# output summary
summary(country.lm)
```

```{r}
# fit the linear model to the categorical variable
continent.lm <- lm(longevity ~ life_exp_2013$continent, data=life_exp_2013)
# output summary
summary(continent.lm)

# Both continent and country were accounted for, but continent will be used instead. The continent variable is easier to work with. 
```

```{r}
# the year column was removed due to our having selected the year 2013 to analyze
# however, this is what we would have done had there been more years

# year.lm <- lm(longevity ~ year, data = life_exp)
# summary(year.lm)
```

```{r}
# fit the linear model to the categorical variable
status.lm <- lm(longevity ~ life_exp_2013$status, data = life_exp_2013)
# output summary
summary(status.lm)
```

##### c. Use the overall F-test to note the significance of the variable.

> After looking at the summary for the country, status, and year categorical variables, The F-test of overall significance indicates that the linear regression model provides a better fit to the data than a model that contains no independent variables. This was concluded becuase the p value is less than the t value.

##### d. Look at the individual t-tests in the summary output and consider whether some levels of the categorical variable are not "statistically" different from one another. Combining this with the plots and tables you created in Project Part 2, are there categories you might "collapse" (combine)? The decision to combine could also be impacted by the amount of data in the categories. If there are many categories determine which categories to collapse at this stage (consider whether the categories make sense to combine too!). If not many categories, just make note of the possible need to collapse later in the model building process.

```{r}
life_exp_2013 %>%
  count(country, name = "CountByCou", sort = TRUE)
```

> The country variable would be a variable we will collapse (we actually have already done this and have a continents column) as there are too many categories within. With over 180 countries, it is difficult to make a simple regression model and obtain other statistics.

## Part C -- Preliminary summary

### Provide a brief (1 paragraph) summary of your findings so far. Some things to comment on:

##### • What variables appear to be associated with your outcome of interest?

> Some of the variables are associated with our outcome of interest and some of them are not. According to our scatterplot graphs in part 1 and part 2, Alcohol, Percentage Expenditure, BMI, HIV.Aids, GDP, thinness5.9.years, Income.composition.of.resources, and Schooling appear to be associated with our outcome of interest. However, some of them are linearly associated with the outcome, some of them are non-linearly associated, and some of them may be associated but it is difficult to see the proper relationship. For example, Income and Schooling seem to have a strong linear relationship; Percentage Expenditure, HIV, and GDP have non-linear relationships; the thinness columns do not seem to have clear relationships.

##### • Do you anticipate using any non-linear terms for any of these predictors (i.e. did you employ any x transformations)?

> Yes, we made transformations for the response variable as well as Percent Expenditure, HIV.AIDS, and GDP.

##### • Are there any of your predictor variables that you think might interact with one another? Note -- this is not a statistical question but rather asks you to reflect on the substantive knowledge/intuition you have about the context of your data and research question.

> We do think that some of our predictor variables might interact with one other, and actually we have already discovered some of this kind of relationship. For example in part B in project part 2, we found that Measles is closely related to infant deaths and deaths under 5 years. Scholing and Income Composition also look like they will interact with each other. Thinness 1-19 and Thinness 5-9 also look highly correlated. Based on the current situation of our society, I think some of the predictors is going to affect each other such as percentage expenditure and income, income and GDP, Schooling and GDP, etc.

```{r}
# Exporting Dataset
life_exp_2013_fact <- life_exp_2013[,c('continent', 'status')]

# assign transformed columns to variable
life_exp_2013_tfm <- cbind(life_exp_2013_tfm_num, life_exp_2013_fact)

# rearrange data
life_exp_2013_tfm <- life_exp_2013_tfm[, c(19, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
                                           12, 13, 14, 15, 16, 17, 18, 20, 21)]

# output dataframe
head(life_exp_2013_tfm)

# assign filepaths to variables
filepath_2013_tfm <- "./data/longevity Data Cleaned Version 2013 TFM.rds"

# save to csv
saveRDS(life_exp_2013_tfm, filepath_2013_tfm)
```
